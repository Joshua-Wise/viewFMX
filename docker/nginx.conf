events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Add CORS headers
    map $request_method $cors_method {
        OPTIONS 'OPTIONS, GET, POST, PUT, DELETE';
        default '';
    }

    server {
        listen 80;
        server_name localhost;

        # Static content
        root /usr/share/nginx/html;
        index index.html;

        # API proxy location
        location /api/v1/ {
            proxy_pass ${NGINX_PROXY_PASS};
            proxy_set_header Host ${NGINX_PROXY_HOST};
            proxy_set_header Authorization "Basic ${GOFMX_TOKEN}";
            
            # Prevent authentication prompts by hiding WWW-Authenticate headers
            proxy_hide_header WWW-Authenticate;
            proxy_hide_header X-Powered-By;
            proxy_hide_header X-AspNet-Version;
            
            # Set timeouts to prevent hanging requests
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings to improve performance
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Only preserve CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Accept, Content-Type' always;
            
            # Handle authentication errors gracefully
            error_page 401 403 = @auth_error;
            
            # Handle OPTIONS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Custom error handler for authentication errors
        location @auth_error {
            # Redirect to custom error page instead of returning JSON
            return 302 /auth-error.html;
        }
        
        # Serve the auth error page
        location = /auth-error.html {
            root /usr/share/nginx/html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Default location
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }
}
